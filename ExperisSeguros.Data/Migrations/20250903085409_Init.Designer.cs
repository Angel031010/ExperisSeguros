// <auto-generated />
using System;
using ExperisSeguros.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ExperisSeguros.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250903085409_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.32")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ExperisSeguros.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ApellidoMaterno")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ApellidoPaterno")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<int>("Genero")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("PaisId")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PaisId");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "a18be9c0-aa65-4af8-bd17-00bd9344e578",
                            AccessFailedCount = 0,
                            ApellidoMaterno = "Torres",
                            ApellidoPaterno = "Ramírez",
                            ConcurrencyStamp = "bf411354-c8e5-466c-9223-e078ad0112a1",
                            Email = "carlos.ramirez@experis.com",
                            EmailConfirmed = true,
                            FechaNacimiento = new DateTime(1985, 9, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            Genero = 0,
                            LockoutEnabled = false,
                            Nombre = "Carlos",
                            NormalizedEmail = "CARLOS.RAMIREZ@EXPERIS.COM",
                            NormalizedUserName = "CARLOS.RAMIREZ@EXPERIS.COM",
                            PaisId = 1,
                            PasswordHash = "AQAAAAEAACcQAAAAEKaIfvkj3Ev8xualACxKZ5NpBY6gyzv8irI4rqGjB2JxYT86ZPocbMYUp4I5IH0HOA==",
                            PhoneNumber = "+5215512345670",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "a04c2a69-9b0d-4d3a-b80a-c017f0072168",
                            TwoFactorEnabled = false,
                            UserName = "carlos.ramirez@experis.com"
                        },
                        new
                        {
                            Id = "b18be9c0-aa65-4af8-bd17-00bd9344e579",
                            AccessFailedCount = 0,
                            ApellidoMaterno = "Hernández",
                            ApellidoPaterno = "Mendoza",
                            ConcurrencyStamp = "bc18ba8b-20a0-4576-b467-31751cf7aa94",
                            Email = "andrea.mendoza@experis.com",
                            EmailConfirmed = true,
                            FechaNacimiento = new DateTime(1992, 9, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            Genero = 1,
                            LockoutEnabled = false,
                            Nombre = "Andrea",
                            NormalizedEmail = "ANDREA.MENDOZA@EXPERIS.COM",
                            NormalizedUserName = "ANDREA.MENDOZA@EXPERIS.COM",
                            PaisId = 1,
                            PasswordHash = "AQAAAAEAACcQAAAAEB3HY7Ll8AKcU6LbvlEPt/C+sP8q9/sGasbYCjefITZ8MSLJV9yICAwRPX/cRdZO+g==",
                            PhoneNumber = "+5215512345671",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "d77ceab9-8148-4dac-a365-613cd4fe9238",
                            TwoFactorEnabled = false,
                            UserName = "andrea.mendoza@experis.com"
                        },
                        new
                        {
                            Id = "c18be9c0-aa65-4af8-bd17-00bd9344e580",
                            AccessFailedCount = 0,
                            ApellidoMaterno = "García",
                            ApellidoPaterno = "López",
                            ConcurrencyStamp = "86d82f78-1f38-4696-a769-8b25dd4fc999",
                            Email = "fernando.lopez@gmail.com",
                            EmailConfirmed = true,
                            FechaNacimiento = new DateTime(1998, 9, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            Genero = 0,
                            LockoutEnabled = false,
                            Nombre = "Fernando",
                            NormalizedEmail = "FERNANDO.LOPEZ@GMAIL.COM",
                            NormalizedUserName = "FERNANDO.LOPEZ@GMAIL.COM",
                            PaisId = 1,
                            PasswordHash = "AQAAAAEAACcQAAAAEGd9YLnr8IOOF/q2TSngVvbZg5ApyvTjUApPr8dMN0ypnoX6xSK7Sk4RfP38JzKx6Q==",
                            PhoneNumber = "+5215512345672",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "fbab6548-ce4c-40fa-a752-cb0d9c29a82f",
                            TwoFactorEnabled = false,
                            UserName = "fernando.lopez@gmail.com"
                        });
                });

            modelBuilder.Entity("ExperisSeguros.Data.Models.Pais", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("nvarchar(3)")
                        .HasMaxLength(3);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Paises");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Codigo = "MX",
                            Nombre = "México"
                        },
                        new
                        {
                            Id = 2,
                            Codigo = "US",
                            Nombre = "Estados Unidos"
                        },
                        new
                        {
                            Id = 3,
                            Codigo = "CA",
                            Nombre = "Canadá"
                        },
                        new
                        {
                            Id = 4,
                            Codigo = "AR",
                            Nombre = "Argentina"
                        },
                        new
                        {
                            Id = 5,
                            Codigo = "BR",
                            Nombre = "Brasil"
                        },
                        new
                        {
                            Id = 6,
                            Codigo = "CL",
                            Nombre = "Chile"
                        },
                        new
                        {
                            Id = 7,
                            Codigo = "CO",
                            Nombre = "Colombia"
                        },
                        new
                        {
                            Id = 8,
                            Codigo = "PE",
                            Nombre = "Perú"
                        });
                });

            modelBuilder.Entity("ExperisSeguros.Data.Models.Poliza", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClienteId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("MontoPrima")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("NumeroPoliza")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("TipoPolizaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("NumeroPoliza")
                        .IsUnique();

                    b.HasIndex("TipoPolizaId");

                    b.ToTable("Polizas");
                });

            modelBuilder.Entity("ExperisSeguros.Data.Models.TipoPoliza", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("TiposPoliza");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descripcion = "Seguro de vida",
                            Nombre = "Vida"
                        },
                        new
                        {
                            Id = 2,
                            Descripcion = "Seguro automotriz",
                            Nombre = "Auto"
                        },
                        new
                        {
                            Id = 3,
                            Descripcion = "Seguro de hogar",
                            Nombre = "Hogar"
                        },
                        new
                        {
                            Id = 4,
                            Descripcion = "Seguro de salud",
                            Nombre = "Salud"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "a18be9c0-aa65-4af8-bd17-00bd9344e575",
                            ConcurrencyStamp = "a18be9c0-aa65-4af8-bd17-00bd9344e575",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "b18be9c0-aa65-4af8-bd17-00bd9344e576",
                            ConcurrencyStamp = "b18be9c0-aa65-4af8-bd17-00bd9344e576",
                            Name = "Broker",
                            NormalizedName = "BROKER"
                        },
                        new
                        {
                            Id = "c18be9c0-aa65-4af8-bd17-00bd9344e577",
                            ConcurrencyStamp = "c18be9c0-aa65-4af8-bd17-00bd9344e577",
                            Name = "Cliente",
                            NormalizedName = "CLIENTE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e578",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            UserId = "b18be9c0-aa65-4af8-bd17-00bd9344e579",
                            RoleId = "b18be9c0-aa65-4af8-bd17-00bd9344e576"
                        },
                        new
                        {
                            UserId = "c18be9c0-aa65-4af8-bd17-00bd9344e580",
                            RoleId = "c18be9c0-aa65-4af8-bd17-00bd9344e577"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ExperisSeguros.Data.Models.ApplicationUser", b =>
                {
                    b.HasOne("ExperisSeguros.Data.Models.Pais", "Pais")
                        .WithMany("Usuarios")
                        .HasForeignKey("PaisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExperisSeguros.Data.Models.Poliza", b =>
                {
                    b.HasOne("ExperisSeguros.Data.Models.ApplicationUser", "Cliente")
                        .WithMany("PolizasComoCliente")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExperisSeguros.Data.Models.TipoPoliza", "TipoPoliza")
                        .WithMany("Polizas")
                        .HasForeignKey("TipoPolizaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ExperisSeguros.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ExperisSeguros.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExperisSeguros.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ExperisSeguros.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
